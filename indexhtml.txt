<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ESP32 Motor Control</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to bottom right, #e0eafc, #cfdef3);
      text-align: center;
      padding: 20px;
      margin: 0;
    }
    h2 {
      color: #333;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .button {
      padding: 15px 30px;
      margin: 10px;
      font-size: 18px;
      border: none;
      border-radius: 10px;
      cursor: pointer;
    }
    .on {
      background-color: #4CAF50;
      color: white;
    }
    .off {
      background-color: #f44336;
      color: white;
    }
    .blue {
      background-color: #2196F3;
      color: white;
    }
    input[type=range] {
      width: 100%;
      margin: 10px 0;
    }
    input[type=number] {
      width: 80px;
      padding: 5px;
      font-size: 16px;
    }
    .section {
      margin: 20px 0;
      padding: 15px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    }
    #codeViewer {
      text-align: left;
      background-color: #1e1e1e;
      color: #d4d4d4;
      padding: 20px;
      border-radius: 10px;
      overflow-x: auto;
      white-space: pre;
      font-family: monospace;
      font-size: 14px;
      max-height: 500px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>POWER ELECTRONICS (EXPERIMENT 8)</h2>

    <!-- Motor Selection Section -->
    <div class="section">
      <h4>Motor Selection</h4>
      <select id="motorSelect">
        <option value="BLDC">BLDC</option>
        <option value="Servo">Servo</option>
        <option value="Brushed">Brushed</option>
        <option value="Stepper">Stepper</option>
        <option value="AC">AC</option>
      </select>
      <br>
      <button id="uploadMotorCode" class="button blue">Upload Motor Code</button>
    </div>

    <!-- Power Control Section -->
    <div class="section">
      <h3>Power</h3>
      <button id="toggleBtn" class="button off">OFF</button>
    </div>

    <!-- PWM Control Section -->
    <div class="section">
      <h4>PWM Control (0-255)</h4>
      <input type="range" id="speedSlider" min="0" max="255" value="127">
      <br>
      <input type="number" id="speedInput" min="0" max="255" value="127">
    </div>

    <!-- Direction Control Section -->
    <div class="section">
      <h5>Direction Control</h5>
      <button id="directionBtn" class="button blue">Clockwise</button>
    </div>

    <!-- Code Viewer Section -->
    <div class="section">
      <h4>Motor Code</h4>
      <pre id="codeViewer">// Motor code will appear here...</pre>
    </div>
  </div>

  <script>
    const toggleBtn = document.getElementById("toggleBtn");
    let isOn = false;

    toggleBtn.addEventListener("click", () => {
      isOn = !isOn;
      toggleBtn.textContent = isOn ? "ON" : "OFF";
      toggleBtn.className = isOn ? "button on" : "button off";
      sendCommand(isOn ? "ON" : "OFF");
    });

    const speedSlider = document.getElementById("speedSlider");
    const speedInput = document.getElementById("speedInput");

    speedSlider.addEventListener("input", () => {
      speedInput.value = speedSlider.value;
      sendCommand("PWM " + speedSlider.value);
    });

    speedInput.addEventListener("input", () => {
      let val = parseInt(speedInput.value);
      if (isNaN(val) || val < 0 || val > 255) return;
      speedSlider.value = val;
      sendCommand("PWM " + val);
    });

    const directionBtn = document.getElementById("directionBtn");
    let isClockwise = true;

    directionBtn.addEventListener("click", () => {
      isClockwise = !isClockwise;
      const direction = isClockwise ? "CLOCKWISE" : "COUNTER";
      directionBtn.textContent = isClockwise ? "Clockwise" : "Counter-Clockwise";
      sendCommand(direction);
    });

    const motorSelect = document.getElementById("motorSelect");
    const uploadMotorCodeBtn = document.getElementById("uploadMotorCode");
    const codeViewer = document.getElementById("codeViewer");

    uploadMotorCodeBtn.addEventListener("click", () => {
      const selectedMotor = motorSelect.value;
      let motorCode = '';

      switch (selectedMotor) {
        case "BLDC":
          motorCode = `#include <ESP32Servo.h>

Servo esc; // Create a Servo object to control the ESC
int escPin = 15; // Connect the ESC signal wire to pin 15

unsigned long motorTurnOnTime = 0; // Track the time when the motor is turned on
bool motorActive = false; // Track motor state
bool directionClockwise = true; // Motor direction
int pwmInput = 0; // PWM value (0 - 255)

void setup() {
  esc.attach(escPin);
  Serial.begin(115200);

  // Initialize ESC
  Serial.println("Initializing ESC...");
  esc.writeMicroseconds(1000); // Minimum throttle to initialize
  delay(2000);
  Serial.println("ESC initialized. ");
  Serial.println("Commands:");
  Serial.println("  'ON' to start motor");
  Serial.println("  'OFF' to stop motor");
  Serial.println("  'PWM <0-255>' to set speed");
  Serial.println("  'CLOCKWISE' or 'COUNTER' to set direction");
}

void loop() {
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toUpperCase();

    if (command == "ON") {
      if (pwmInput > 0) {
        sendPWMToESC(pwmInput);
        motorActive = true;
        motorTurnOnTime = millis();
        Serial.println("Motor turned ON for 1 second. ");
      } else {
        Serial.println("Set PWM > 0 before turning ON.");
      }
    }
    else if (command == "OFF") {
      motorActive = false;
      esc.writeMicroseconds(1000);
      Serial.println("Motor turned OFF.");
    }
    else if (command.startsWith("PWM")) {
      int spaceIndex = command.indexOf(' ');
      if (spaceIndex > 0) {
        String pwmValueStr = command.substring(spaceIndex + 1);
        int newPWM = pwmValueStr.toInt();

        if (newPWM >= 0 && newPWM <= 255) {
          pwmInput = newPWM;
          Serial.print("PWM set to: ");
          Serial.println(pwmInput);

          if (motorActive) {
            sendPWMToESC(pwmInput); // Update while running
          }
        } else {
          Serial.println("Invalid PWM value. Please enter a value between 0 and 255.");
        }
      } else {
        Serial.println("Invalid format. Use 'PWM <value>'.");
      }
    }
    else if (command == "CLOCKWISE") {
      directionClockwise = true;
      Serial.println("Direction set to CLOCKWISE.");
    }
    else if (command == "COUNTER") {
      directionClockwise = false;
      Serial.println("Direction set to COUNTER-CLOCKWISE.");
    }
    else {
      Serial.println("Invalid command. Use 'ON', 'OFF', 'PWM <0-255>', 'CLOCKWISE', or 'COUNTER'.");
    }
  }

  // 
  if (motorActive && (millis() - motorTurnOnTime >= 1000)) {
    esc.writeMicroseconds(1000);
    motorActive = false;
    Serial.println("Motor automatically turned OFF after 1 second.");
  }
}

void sendPWMToESC(int pwmVal) {
  int outputPWM;

  // Simulate direction with throttle offset (center = 1500)
  if (directionClockwise) {
    outputPWM = map(pwmVal, 0, 255, 1500, 2000); // full forward
  } else {
    outputPWM = map(pwmVal, 0, 255, 1500, 1000); // full reverse
  }

  Serial.print("Sending PWM: ");
  Serial.println(outputPWM);

  esc.writeMicroseconds(outputPWM);
}
`;
          break;
        case "Servo":
          motorCode = `#include <ESP32Servo.h>

Servo myServo;
int servoPin = 15;

bool isOn = false;
bool directionClockwise = true;
int pwmValue = 128;

void setup() {
  myServo.attach(servoPin);
  Serial.begin(115200);
  Serial.println("Commands:");
  Serial.println("  'ON' to start motor");
  Serial.println("  'OFF' to stop motor");
  Serial.println("  'PWM <0-255>' to set speed");
  Serial.println("  'CLOCKWISE' or 'COUNTER' to set direction");
}

void loop() {
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toUpperCase();

    if (command == "ON") {
      isOn = true;
      Serial.println("Motor turned ON.");
    } else if (command == "OFF") {
      isOn = false;
      Serial.println("Motor turned OFF.");
    } else if (command.startsWith("PWM")) {
      int spaceIndex = command.indexOf(' ');
      if (spaceIndex > 0) {
        String pwmStr = command.substring(spaceIndex + 1);
        int newPWM = pwmStr.toInt();
        if (newPWM >= 0 && newPWM <= 255) {
          pwmValue = newPWM;
          Serial.print("PWM set to: ");
          Serial.println(pwmValue);
        } else {
          Serial.println("Invalid PWM value.");
        }
      }
    } else if (command == "CLOCKWISE") {
      directionClockwise = true;
      Serial.println("Direction: CLOCKWISE");
    } else if (command == "COUNTER") {
      directionClockwise = false;
      Serial.println("Direction: COUNTER-CLOCKWISE");
    } else {
      Serial.println("Unknown command");
    }
  }

  if (isOn) {
    for (int i = 0; i < 10; i++) {
      myServo.write(directionClockwise ? 0 : 180);
      delay(map(255 - pwmValue, 0, 255, 10, 1000));
      myServo.write(directionClockwise ? 180 : 0);
      delay(map(255 - pwmValue, 0, 255, 10, 1000));
    }
    isOn = false;
    Serial.println("Cycle completed.");
  }
}`;
          break;
        case "Brushed":
          motorCode = `int motor1pin1 = 2;
int motor1pin2 = 4;
int motorSpeedPin = 15; // PWM pin for speed control

bool motorOn = false;            // Motor state
int motorSpeed = 0;              // PWM speed (0-255)
unsigned long motorStartTime = 0;
const unsigned long motorRunTime = 2000; // Motor runs for 2 seconds
bool directionClockwise = true;  // true = clockwise, false = counter-clockwise

void setup() {
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motorSpeedPin, OUTPUT);

  Serial.begin(115200);
  Serial.println("Commands:");
  Serial.println("  'ON' to start the motor");
  Serial.println("  'OFF' to stop the motor");
  Serial.println("  'PWM <0-255>' to set speed");
  Serial.println("  'CLOCKWISE' or 'COUNTER' to set direction");
  
}

void loop() {
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toUpperCase(); 

    if (command == "ON") {
      motorOn = true;
      motorStartTime = millis();
      setMotorDirection();
      analogWrite(motorSpeedPin, motorSpeed);
      Serial.println("Motor turned ON for 2 seconds.");
    } 
    else if (command == "OFF") {
      stopMotor();
      Serial.println("Motor turned OFF.");
    } 
    else if (command.startsWith("PWM")) {
      int spaceIndex = command.indexOf(' ');
      if (spaceIndex > 0) {
        String pwmValueStr = command.substring(spaceIndex + 1);
        int pwmValue = pwmValueStr.toInt();

        if (pwmValue >= 0 && pwmValue <= 255) {
          motorSpeed = pwmValue;
          if (motorOn) {
            analogWrite(motorSpeedPin, motorSpeed);
          }
          Serial.print("PWM set to: ");
          Serial.println(motorSpeed);
        } else {
          Serial.println("Invalid PWM value. Please enter a value between 0 and 255.");
        }
      } else {
        Serial.println("Invalid format. Use 'PWM <value>'.");
      }
    }
    else if (command == "CLOCKWISE") {
      directionClockwise = true;
      Serial.println("Direction set to CLOCKWISE.");
    }
    else if (command == "COUNTER") {
      directionClockwise = false;
      Serial.println("Direction set to COUNTER-CLOCKWISE.");
    }
    else {
      Serial.println("Invalid command. Use 'ON', 'OFF', 'PWM <0-255>', 'CLOCKWISE', or 'COUNTER'.");
    }
  }

  // Auto turn off after 2 seconds
  if (motorOn && (millis() - motorStartTime >= motorRunTime)) {
    stopMotor();
    Serial.println("Motor automatically turned OFF after 2 seconds.");
  }
}

// Apply direction settings
void setMotorDirection() {
  if (directionClockwise) {
    digitalWrite(motor1pin1, HIGH);
    digitalWrite(motor1pin2, LOW);
  } else {
    digitalWrite(motor1pin1, LOW);
    digitalWrite(motor1pin2, HIGH);
  }
}

// Stop the motor
void stopMotor() {
  motorOn = false;
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);
  analogWrite(motorSpeedPin, 0);
}
`;
          break;
        case "Stepper":
          motorCode = `#include <Stepper.h>

const int stepsPerRevolution = 2048;
#define IN1 16
#define IN2 17
#define IN3 18
#define IN4 19

Stepper myStepper(stepsPerRevolution, IN1, IN3, IN2, IN4);

bool motorOn = false;
const int constantSteps = 100;
int motorSpeed = 17;
int motorDirection = -1;

void setup() {
  myStepper.setSpeed(motorSpeed);
  Serial.begin(115200);
  Serial.println("Commands:");
  Serial.println("  'ON' to start motor");
  Serial.println("  'OFF' to stop motor");
  Serial.println("  'PWM <0-255>' to set speed");
  Serial.println("  'CLOCKWISE' or 'COUNTER' to set direction");
}

void loop() {
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toUpperCase();

    if (command == "ON") {
      motorOn = true;
      Serial.println("Motor turned ON.");
    } else if (command == "OFF") {
      motorOn = false;
      Serial.println("Motor turned OFF.");
    } else if (command.startsWith("PWM")) {
      String pwmStr = command.substring(4);
      pwmStr.trim();
      int pwmValue = pwmStr.toInt();
      if (pwmValue >= 0 && pwmValue <= 255) {
        motorSpeed = map(pwmValue, 0, 255, 1, 17);
        myStepper.setSpeed(motorSpeed);
        Serial.print("PWM set to: ");
        Serial.println(pwmValue);
      } else {
        Serial.println("Invalid PWM value. Please enter a value between 0 and 255.");
      }
    } else if (command == "CLOCKWISE") {
      motorDirection = -1;
      Serial.println("Direction set to CLOCKWISE.");
    } else if (command == "COUNTER") {
      motorDirection = 1;
      Serial.println("Direction set to COUNTER-CLOCKWISE.");
    } else {
      Serial.println("Invalid command. Use 'ON', 'OFF', 'PWM <0-255>', 'CLOCKWISE', or 'COUNTER'.");
    }
  }

  if (motorOn) {
    myStepper.step(motorDirection * constantSteps);
  }
}`;
          break;
        case "AC":
          motorCode = `const int relay = 15;
bool relayOn = false; // Relay state: true for on, false for off

void setup() {
  Serial.begin(115200);
  pinMode(relay, OUTPUT);
  digitalWrite(relay, HIGH); // Initialize with the relay off (Normally Open)
  Serial.println("Enter 'ON' to enable current flow and 'OFF' to stop current flow.");
}

void loop() {
  // Check if there is any data available on the serial monitor
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n'); // Read serial input until newline
    
    // Turn relay on or off based on input
    if (input.equalsIgnoreCase("ON")) {
      relayOn = true;
      Serial.println("Motor turned ON.");
    } else if (input.equalsIgnoreCase("OFF")) {
      relayOn = false;
      Serial.println("Motor turned off.");
    }
  }

  // Control the relay based on the relayOn state
  if (relayOn) {
    digitalWrite(relay, LOW);  // Activate relay 
  } else {
    digitalWrite(relay, HIGH); // Deactivate relay 
  }

  delay(1000);
}
`;
          break;
      }

      codeViewer.innerText = motorCode;
      sendCommand("MOTOR_CODE:" + selectedMotor);
    });

    function sendCommand(cmd) {
      fetch(`/cmd?val=${cmd}`)
        .then(response => response.text())
        .then(data => console.log("Command sent:", cmd))
        .catch(error => console.error("Error sending command:", error));
    }
  </script>
</body>
</html>
